category_1_max,category_3_max,merchant_category_id_max,merchant_id_max,category_2_max,
state_id_max,subsector_id_max,year_max,dayofweek_max,weekofyear_max,month_max,isweekend_max,
isweekendfromFriday_max,hour_max,hour_mean,city_id_sum,city_id_sd,merchant_category_id_sd,merchant_id_sd,
purchase_date_sd,state_id_sd,subsector_id_sd,dayofweek_sd,weekofyear_sd,isweekend_sd,isweekendfromFriday_sd,
hour_sd,year_sum,hour_sum,month_sum,month_lag_sum,isweekendfromFriday_sum,dayofweek_sum,year_sd,month_sd,merchant_id_mean,
merchant_id_min,weekofyear_sum,isweekend_sum,month_sd,))%>%
mutate(state_mobility=ifelse(state_id_mean%in%state_id_original,0,1))%>%
mutate(city_mobility=ifelse(city_id_mean%in%city_id_original,0,1))%>%
select(-c(city_id_mean,state_id_mean))#kill th col after mutate the mobility
#delete nonsense for the hist and new_agg and add some new cols mostly time diff related
hist_agg_clean=hist_agg%>%
select(-c(year_mean,weekofyear_mean,month_mean,authorized_flag_min,city_id_min,category_1_min,
installments_min,category_3_min,merchant_category_id_min,merchant_category_id_min,
category_2_min,state_id_min,subsector_id_min,dayofweek_min,weekofyear_min,installments_max,
month_min,isweekend_min,isweekendfromFriday_min,hour_min,authorized_flag_max,city_id_max,
category_1_max,category_3_max,merchant_category_id_max,merchant_id_max,category_2_max,
state_id_max,subsector_id_max,year_max,dayofweek_max,weekofyear_max,month_max,isweekend_max,
isweekendfromFriday_max,hour_max,hour_mean,city_id_sum,city_id_sd,merchant_category_id_sd,merchant_id_sd,
purchase_date_sd,state_id_sd,subsector_id_sd,dayofweek_sd,weekofyear_sd,isweekend_sd,isweekendfromFriday_sd,
hour_sd,year_sum,hour_sum,month_sum,month_lag_sum,isweekendfromFriday_sum,dayofweek_sum,year_sd,month_sd,merchant_id_mean,
merchant_id_min,weekofyear_sum,isweekend_sum,month_sd))%>%
mutate(state_mobility=ifelse(state_id_mean%in%state_id_original,0,1))%>%
mutate(city_mobility=ifelse(city_id_mean%in%city_id_original,0,1))%>%
select(-c(city_id_mean,state_id_mean))#kill th col after mutate the mobility
hist_agg_clean%>%names()
historical_data$subsector_id%>%table()
subsector_id_original=historical_data$subsector_id%>%unique()
#delete nonsense for the hist and new_agg and add some new cols mostly time diff related
hist_agg_clean=hist_agg%>%
select(-c(year_mean,weekofyear_mean,month_mean,authorized_flag_min,city_id_min,category_1_min,
installments_min,category_3_min,merchant_category_id_min,merchant_category_id_min,
category_2_min,state_id_min,subsector_id_min,dayofweek_min,weekofyear_min,installments_max,
month_min,isweekend_min,isweekendfromFriday_min,hour_min,authorized_flag_max,city_id_max,
category_1_max,category_3_max,merchant_category_id_max,merchant_id_max,category_2_max,
state_id_max,subsector_id_max,year_max,dayofweek_max,weekofyear_max,month_max,isweekend_max,
isweekendfromFriday_max,hour_max,hour_mean,city_id_sum,city_id_sd,merchant_category_id_sd,merchant_id_sd,
purchase_date_sd,state_id_sd,subsector_id_sd,dayofweek_sd,weekofyear_sd,isweekend_sd,isweekendfromFriday_sd,
hour_sd,year_sum,hour_sum,month_sum,month_lag_sum,isweekendfromFriday_sum,dayofweek_sum,year_sd,month_sd,merchant_id_mean,
merchant_id_min,weekofyear_sum,isweekend_sum,month_sd,year_min,state_id_sum,subsector_id_sum,category_2_sd,category_3_sd,
category_1_sd))%>%
mutate(state_mobility=ifelse(state_id_mean%in%state_id_original,0,1))%>%
mutate(city_mobility=ifelse(city_id_mean%in%city_id_original,0,1))%>%
select(-c(city_id_mean,state_id_mean))#kill th col after mutate the mobility
hist_agg_clean%>%names()
#delete nonsense for the hist and new_agg and add some new cols mostly time diff related
hist_agg_clean=hist_agg%>%
select(-c(year_mean,weekofyear_mean,month_mean,authorized_flag_min,city_id_min,category_1_min,
installments_min,category_3_min,merchant_category_id_min,merchant_category_id_min,
category_2_min,state_id_min,subsector_id_min,dayofweek_min,weekofyear_min,installments_max,
month_min,isweekend_min,isweekendfromFriday_min,hour_min,authorized_flag_max,city_id_max,
category_1_max,category_3_max,merchant_category_id_max,merchant_id_max,category_2_max,
state_id_max,subsector_id_max,year_max,dayofweek_max,weekofyear_max,month_max,isweekend_max,
isweekendfromFriday_max,hour_max,hour_mean,city_id_sum,city_id_sd,merchant_category_id_sd,merchant_id_sd,
purchase_date_sd,state_id_sd,subsector_id_sd,dayofweek_sd,weekofyear_sd,isweekend_sd,isweekendfromFriday_sd,
hour_sd,year_sum,hour_sum,month_sum,month_lag_sum,isweekendfromFriday_sum,dayofweek_sum,year_sd,month_sd,merchant_id_mean,
merchant_id_min,weekofyear_sum,isweekend_sum,month_sd,year_min,state_id_sum,subsector_id_sum,category_2_sd,category_3_sd,
category_1_sd,category_1_sum,category_2_sum,category_3_sum))%>%
mutate(state_mobility=ifelse(state_id_mean%in%state_id_original,0,1))%>%
mutate(city_mobility=ifelse(city_id_mean%in%city_id_original,0,1))%>%
select(-c(city_id_mean,state_id_mean))#kill th col after mutate the mobility
hist_agg_clean%>%names()
install.packages("rfm")
# rfm scoring the key to champion
library(dplyr)
library(rfm)
rfm
rfm_data_customer
analysis_date <- lubridate::as_date('2018-01-31', tz = 'UTC')
rfm_data_customer%>%names()
rfm_result <- rfm_table_customer(rfm_data_customer, customer_id, number_of_orders,
recency_days, revenue, analysis_date)
rfm_result
rfm_result$monetary_bins
rfm_result$analysis_date
rfm_result%>%names()
rfm_result$monetary_bins
rfm_result$rfm$rfm_score
rfm_data_customer$customer_id[1]<-"roger123"
rfm_result <- rfm_table_customer(rfm_data_customer, customer_id, number_of_orders,
recency_days, revenue, analysis_date)
rfm_result$rfm$rfm_score
rfm_result$rfm$customer_id
rfm_result$rfm%>%View()
rfm_result$rfm%>%names()
rfm_result$rfm%>%
mutate(segement=ifelse(recency_score<=2 & frequency_score<=2 & monetary_score<=2,"Lost",
0))
rfm_result$rfm%>%
mutate(segement=ifelse(recency_score<=2 & frequency_score<=2 & monetary_score<=2,"Lost",
ifelse(1<recency_score<=2 & 1<frequency_score<=2 & 1<monetary_score<=2)))
rfm_result$rfm%>%
mutate(segement=ifelse(recency_score<=2 & frequency_score<=2 & monetary_score<=2,"Lost",
ifelse(recency_score<=2 & frequency_score<=2 & monetary_score<=2&recency_score>1 & frequency_score>1 & monetary_score>1,"Hibernating",0)))
%>%View()
rfm_result$rfm%>%
mutate(segement=ifelse(recency_score<=2 & frequency_score<=2 & monetary_score<=2,"Lost",
ifelse(recency_score<=2 & frequency_score<=2 & monetary_score<=2&recency_score>1 & frequency_score>1 & monetary_score>1,"Hibernating",0)))%>%View()
library(xgboost)
library(caret)
dplyr
library(dplyr)
iris
iris%>%
)
iris%>%split(f = Species)
iris%>%split(f = iris$Species)
iris%>%split(f = iris$Species,iris$Petal.Length)
iris%>%split(f = c(iris$Species,iris$Petal.Length))
library(tidyr)
names(iris)
iris%>%
nest(Sepal.Length:Petal.Width)
k=iris%>%
nest(Sepal.Length:Petal.Width)
k
k[[1]]
split(iris, with(df, interaction(Species,Petal.Width)), drop = TRUE)
split(iris, with(df, interaction(Species)), drop = TRUE)
split(iris, with(iris, interaction(Species)), drop = TRUE)
split(iris, with(iris, interaction(Species,Petal.Width)), drop = TRUE)
k=split(iris, with(iris, interaction(Species,Petal.Width)), drop = TRUE)
k
k[[1]]
k$setosa.0.1
library(plyr)
x <- daply(iris, .(c(Species,Petal.Width)), function(x)return(x))
x <- daply(iris, .(c(Species)), function(x)return(x))
x
x <- daply(iris, .(Species), function(x)return(x))
x
k=split(iris, with(iris, interaction(Species,Petal.Width)), drop = TRUE)
k
10000/46
tmp=c(12,3,4,5)
for(i in 1:length(tmp)){
tmp[i]=i+1
}
tmp
tmp=c(12,3,4,5)
for(i in 1:length(tmp)){
tmp[i]=i+1
}
tmp
tmp=c(12,3,4,5)
for(i in 1:length(tmp)){
tmp[[i]]=i+1
}
tmp
tmp[i]=tmp[i]+1
tmp
tmp=c(12,3,4,5)
for(i in 1:length(tmp)){
tmp[i]=tmp[i]+1
}
tmp
tmp=c(12,3,4,5)
for(i in 1:length(tmp)){
tmp[i]=tmp[i]+1
}
tmp
test_func<-function(i){
tmp[i]=tmp[i]+1
}
apply(c(1:4),test_func)
sapply(c(1:4), test_func)
tmp=c(12,3,4,5)
for(i in 1:length(tmp)){
tmp[i]=tmp[i]+1
}
tmp
tmp=c(12,3,4,5)
sapply(c(1:4), test_func)
tmp=data.frame(first=c(12,3,4,5),second=c(2,4,5,8))
test_func<-function(i){
tmp[i,"first"]=tmp[i,"first"]+1
}
tmp=data.frame(first=c(12,3,4,5),second=c(2,4,5,8))
sapply(c(1:4), test_func)
test_func<-function(i){
tmp[i,"first"]=tmp[i,"first"]+1
return(tmp)
}
tmp=data.frame(first=c(12,3,4,5),second=c(2,4,5,8))
sapply(c(1:4), test_func)
test_func<-function(i){
tmp[i,"first"]=tmp[i,"first"]+1
tmp[i,"second"]=tmp[i,"second"]*4
}
tmp=data.frame(first=c(12,3,4,5),second=c(2,4,5,8))
sapply(c(1:4), test_func)
test_func<-function(i){
{
tmp[i,"first"]=tmp[i,"first"]+1
tmp[i,"second"]=tmp[i,"second"]*4}
}
tmp=data.frame(first=c(12,3,4,5),second=c(2,4,5,8))
sapply(c(1:4), test_func)
tapply(c(1:4), test_func)
lapply(c(1:4), test_func)
tmp
test_func<-function(i){
tmp[i,"first"]=tmp[i,"first"]+1
tmp[i,"second"]=tmp[i,"second"]*4
}
sapply(c(1:4), test_func)
tmp
test_func<-function(i){
tmp[i,"first"]=tmp[i,"first"]+1
tmp[i,"second"]=tmp[i,"second"]*4
}
tmp
sapply(c(1:4), test_func)
tmp
test_func<-function(i){
tmp[i,"first"]<-tmp[i,"first"]+1
tmp[i,"second"]<-tmp[i,"second"]*4
}
tmp
sapply(c(1:4), test_func)
tmp
test_func<-function(i){
tmp[i,"first"]<-tmp[i,"first"]+1
tmp[i,"second"]<-tmp[i,"second"]*4
}
tmp$first=sapply(c(1:4), test_func)
tmp
tmp=data.frame(first=c(12,3,4,5),second=c(2,4,5,8))
tmp$first=sapply(c(1:4), test_func)
tmp
test_func<-function(i){
tmp[i,"first"]<-tmp[i,"first"]+1
}
tmp
tmp=data.frame(first=c(12,3,4,5),second=c(2,4,5,8))
tmp$first=sapply(c(1:4), test_func)
tmp
install.packages("isofor")
library(devtools)
install_github("Zelazny7/isofor")
install.packages("devtools")
install_github("Zelazny7/isofor")
install.packages("devtools")
install_github("Zelazny7/isofor")
install.packages("devtools")
50000*16
51000-8500
42500-15000
27500-2400
25100-10000
15100-3000
68*13
800/24
800/24
install.packages("ggthemes")
library(tidyverse)
library(ggthemes)
library(ggmosaic)
library(gridExtra)
library(repr)
library(data.table)
library(fastDummies)
library(lightgbm)
library(tictoc)
install.packages("tictoc")
install.packages("repr")
install.packages("fastDummies")
install.packages("gridExtra")
install.packages("ggmosaic")
library(tidyverse)
library(ggthemes)
library(ggmosaic)
library(gridExtra)
library(repr)
library(data.table)
library(fastDummies)
#library(lightgbm)
library(tictoc)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
install.packages("tidyverse")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
list.files('../input')
list.files()
library(tidyverse)
library(ggthemes)
library(ggmosaic)
library(gridExtra)
library(repr)
library(data.table)
library(fastDummies)
#library(lightgbm)
library(tictoc)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
list.files()
tic("train_identity")
train_identity <- fread('../input/train_identity.csv') %>% data.frame
train_identity <- fread('/train_identity.csv') %>% data.frame
train_identity <- fread('/.train_identity.csv') %>% data.frame
list.files()
train_identity <- fread('./train_identity.csv') %>% data.frame
toc()
test_identity <- fread('./test_identity.csv') %>% data.frame
toc()
train_transaction <- fread('./train_transaction.csv') %>% data.frame
test_transaction <- fread('./test_transaction.csv') %>% data.frame
# joining transaction and identity tables
train <- left_join(train_transaction, train_identity)
test <- left_join(test_transaction, test_identity)
dim(train) %>% print
dim(test) %>% print
rm(train_identity, train_transaction, test_identity, test_transaction)
train%>% nrow()
train%>% names()
missing_train <- colSums(is.na(train))[colSums(is.na(train)) > 0] %>% sort(decreasing=T)
print(paste(length(missing_train), 'columns out of', ncol(train), 'have missing values in train'))
missing_train_pct <- round(missing_train/nrow(train), 2)
names(missing_train_pct) <- names(missing_train)
missing_train_pct[missing_train_pct > 0.5] %>% t
train$key <- "train"
test$key <- "test"
full <- bind_rows(train, test)
rm(train, test)
# data_preprocess
full%>%norw()
# data_preprocess
full%>%nrow()
# data_preprocess
full%>%names()
# data_preprocess
full%>%str()
full$ TransactionDT %>% as.Date()
full$ TransactionDT %>% as.Date(origin= "1992-02-12")
full$ TransactionDT %>% as.Date(origin= "1900-02-12")
full$ TransactionDT %>% as.Date(origin= "1900-02-12")
full$ TransactionDT %>% as.Date(origin= "1-02-12")
full$ TransactionDT %>% as.Date(origin= "1900-02-12")
full$ TransactionDT %>% as.Date(origin= "1200-02-12")
full$ TransactionDT %>% as.Date(origin= "1700-02-12")
full$ TransactionDT %>% as.Date(origin= "1700-02-12")%>%range()
full$ TransactionDT %>%as.Date("1992-02-12 04:30:66")%>%range()
full$ TransactionDT %>%as.POSIXct("1992-02-12 04:30:66")%>%range()
full$ TransactionDT %>%as.POSIX("1992-02-12 04:30:66")%>%range()
full$ TransactionDT %>%as.POSIXct.Date("1992-02-12 04:30:66")%>%range()
full$ TransactionDT %>%as.POSIXct.Date()%>%range()
full$ TransactionDT %>%as.POSIXct.Date()%>%range()
full$ TransactionDT %>%range()
60*24*60
34214345/86400
# date time is second , it is a one year data !
full%>%
mutate(TransactionDT_mod  =  TransactionDT/86400)
full$Transaction_date_time/86400 %>% as.Date("2019-01-01")
full$Transaction_date_time/86400 %>% as.Date("2019-01-01")
(full$Transaction_date_time/86400) %>% as.Date("2019-01-01")
(full$Transaction_date_time/86400) %>% as.Date(origin="2019-01-01")
(full$Transaction_date_time/86400)
(full$TransactionDT/86400)
3.5 %>% as.Date("2009-01-01")
3 %>% as.Date("2009-01-01")
2%>% as.Date("2009-01-01")
Ray_model = function(x, y, best_iteration){
set.seed(12345)
# xgboost parameters setup
param <- list("objective" = "binary:logistic",
'colsample_bytree' = 0.7,
'subsample' = 0.7,
'max_depth' = 6,
'eta' = 0.1,
'seed' = 12345)
set.seed(12345)
Y = as.factor(y)
X = xgb.DMatrix(data.matrix(x), label = Y, missing = NA)
if(is.na(best_iteration)){
print('no default, run cv for best iteration')
set.seed(12345)
cv = createFolds(Y, k = 10)
xgboost_cv = xgb.cv(param = param, data = X, folds = cv, nrounds = 10000, early_stopping_rounds = 500, print_every_n = 500)
best_iteration = xgboost_cv$best_iteration
}
set.seed(12345)
xgb_model = xgboost(param = param,  data = X, nrounds = best_iteration, print_every_n = 500)
return(list(best_iteration = best_iteration,
model = xgb_model))
}
Ray_model(x=iris%>%select(-Species),y=iris$Species)
library(xgboost)
Ray_model(x=iris%>%select(-Species),y=iris$Species)
Ray_model(x=iris%>%select(-Species),y=iris$Species,best_iteration = NA)
library(data.table)
library(dplyr)
library(Matrix)
library(xgboost)
library(caret)
library(xgboost)
Ray_model(x=iris%>%select(-Species),y=iris$Species,best_iteration = NA)
iris$Species%>%table()
iris%>%mutate(Species = ifelse(Species=="setosa",1,0))
iris=iris%>%mutate(Species = ifelse(Species=="setosa",1,0))
Ray_model(x=iris%>%select(-Species),y=iris$Species,best_iteration = NA)
Ray_model = function(x, y, best_iteration){
set.seed(12345)
# xgboost parameters setup
param <- list("objective" = "binary:logistic",
'colsample_bytree' = 0.7,
'subsample' = 0.7,
'max_depth' = 6,
'eta' = 0.1,
'seed' = 12345)
set.seed(12345)
Y=y
#Y = as.factor(y)
X = xgb.DMatrix(data.matrix(x), label = Y, missing = NA)
if(is.na(best_iteration)){
print('no default, run cv for best iteration')
set.seed(12345)
cv = createFolds(Y, k = 10)
xgboost_cv = xgb.cv(param = param, data = X, folds = cv, nrounds = 10000, early_stopping_rounds = 500, print_every_n = 500)
best_iteration = xgboost_cv$best_iteration
}
set.seed(12345)
xgb_model = xgboost(param = param,  data = X, nrounds = best_iteration, print_every_n = 500)
return(list(best_iteration = best_iteration,
model = xgb_model))
}
library(xgboost)
iris=iris%>%mutate(Species = ifelse(Species=="setosa",1,0))
Ray_model(x=iris%>%select(-Species),y=iris$Species,best_iteration = NA)
Ray_model = function(x, y, best_iteration){
set.seed(12345)
# xgboost parameters setup
param <- list("objective" = "binary:logistic",
'colsample_bytree' = 0.7,
'subsample' = 0.7,
'max_depth' = 6,
'eta' = 0.1,
'seed' = 12345)
set.seed(12345)
Y=y
#Y = as.factor(y)
X = xgb.DMatrix(data.matrix(x), label = Y, missing = NA)
if(is.na(best_iteration)){
print('no default, run cv for best iteration')
set.seed(12345)
xgboost_cv = xgb.cv(param = param, data = X, nfolds = 5, nrounds = 10000, early_stopping_rounds = 500, print_every_n = 500)
best_iteration = xgboost_cv$best_iteration
}
set.seed(12345)
xgb_model = xgboost(param = param,  data = X, nrounds = best_iteration, print_every_n = 500)
return(list(best_iteration = best_iteration,
model = xgb_model))
}
library(xgboost)
Ray_model(x=iris%>%select(-Species),y=iris$Species,best_iteration = NA)
Ray_model = function(x, y, best_iteration){
set.seed(12345)
# xgboost parameters setup
param <- list("objective" = "binary:logistic",
'colsample_bytree' = 0.7,
'subsample' = 0.7,
'max_depth' = 6,
'eta' = 0.1,
'seed' = 12345)
set.seed(12345)
Y=y
#Y = as.factor(y)
X = xgb.DMatrix(data.matrix(x), label = Y, missing = NA)
if(is.na(best_iteration)){
print('no default, run cv for best iteration')
set.seed(12345)
xgboost_cv = xgb.cv(param = param, data = X, nfold = 5, nrounds = 10000, early_stopping_rounds = 500, print_every_n = 500)
best_iteration = xgboost_cv$best_iteration
}
set.seed(12345)
xgb_model = xgboost(param = param,  data = X, nrounds = best_iteration, print_every_n = 500)
return(list(best_iteration = best_iteration,
model = xgb_model))
}
library(xgboost)
Ray_model(x=iris%>%select(-Species),y=iris$Species,best_iteration = NA)
Ray_model = function(x, y, best_iteration){
set.seed(12345)
# xgboost parameters setup
param <- list("objective" = "binary:logistic",
'colsample_bytree' = 0.7,
'subsample' = 0.7,
'max_depth' = 6,
'eta' = 0.1,
'seed' = 12345)
set.seed(12345)
#Y=y
Y = as.factor(y)
X = xgb.DMatrix(data.matrix(x), label = Y, missing = NA)
if(is.na(best_iteration)){
print('no default, run cv for best iteration')
set.seed(12345)
xgboost_cv = xgb.cv(param = param, data = X, nfold = 5, nrounds = 10000, early_stopping_rounds = 500, print_every_n = 500)
best_iteration = xgboost_cv$best_iteration
}
set.seed(12345)
xgb_model = xgboost(param = param,  data = X, nrounds = best_iteration, print_every_n = 500)
return(list(best_iteration = best_iteration,
model = xgb_model))
}
library(xgboost)
Ray_model(x=iris%>%select(-Species),y=iris$Species,best_iteration = NA)
X_train
del_vars = c('P_emaildomain', 'R_emaildomain', 'id_30', 'id_31', 'id_33', 'DeviceInfo')
cat_vars = setdiff(cat_vars, del_vars)
del_vars = c('P_emaildomain', 'R_emaildomain', 'id_30', 'id_31', 'id_33', 'DeviceInfo')
X_train <- full%>%filter(key == "train") %>% select(-del_vars)
X_test <- full%>%filter(key == "train") %>% select(-del_vars)
X_train%>%names()
Ray_model(x=X_train%>%select(-isFraud),y=X_train$isFraud,best_iteration = NA)
